Dependancies:
    * numpy
    * matplotlib
    * jupyter notebooks
    * tqdm

--- Game of Life ---
Run the game of life with `python game_of_life.py -v` for visualing game of life
starting from a random point. You can also specify the starting grid:
    * `python game_of_life.py -v -g random`
    * `python game_of_life.py -v -g blinker`
    * `python game_of_life.py -v -g glider`

For the histogram of equilibration times refer to the notebook Checkpoint2.ipynb
Plots are also included in the folder results.

The found velocity was 0.353508 cells per sweep, by fitting the center of mass
position, and is also in the aforementioned notebook.

--- SIRS ---
The sirs code can be ran with `python sirs_model.py N p1 p2 p3` for an NxN grid
with probabilities p1, p2, p3 of the state updating to the next one.

To see an example of absorbing, dynamic equilibrium, and wave states run
`python states.py`. Gifs of the animations and plots of the number of states
are also available.

The phase diagram and slice can be generated by passing valid config files to
`python generate_data.py NAME` to generate data, then
`python generate_plot.py NAME` to generate the plots.

For immunity use `python generate_immunity_data.py N -r RUN_NAME` and
`python generate_immunity_plot.py -r RUN_NAME`. where '.' is a valid run name.
N is the number of immunity fractions to check.

All plots are available to see without running code in the results directory.
